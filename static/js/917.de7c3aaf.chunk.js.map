{"version":3,"file":"static/js/917.de7c3aaf.chunk.js","mappings":"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","sources":["components/ButtonBlue/ButtonBlue.tsx","components/Panel/Panel.tsx","components/TextGreen/TextGreen.tsx","components/CodeInput/CodeInput.tsx","pages/Code/Code.tsx","hooks/useFetching.tsx","webpack://DEGENLAND/./src/pages/Code/code.css?cd43"],"sourcesContent":["import React, { ButtonHTMLAttributes } from \"react\";\r\nimport \"./buttonblue.css\";\r\n\r\nexport const ButtonBlue: React.FC<ButtonHTMLAttributes<HTMLButtonElement>> = ({\r\n    className = \"\",\r\n    ...props\r\n}) => {\r\n    return <button className={`button-blue ${className}`} {...props} />;\r\n};\r\n","import React, { ReactNode } from \"react\";\r\nimport \"./panel.css\";\r\n\r\ninterface Props {\r\n    children?: ReactNode;\r\n    className?: string;\r\n}\r\n\r\nexport const Panel: React.FC<Props> = ({ children, className = \"\" }) => {\r\n    return (\r\n        <div className={`panel lgs ${className}`}>\r\n            <div className='panel-shadow wds'>\r\n                <div className='panel-paddings'>\r\n                    <div className='panel-border1'>\r\n                        <div className='panel-border2'>\r\n                            <div className='panel-content'>{children}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { ReactNode } from \"react\";\r\nimport \"./textgreen.css\";\r\n\r\ninterface Props {\r\n    children?: ReactNode;\r\n    className?: string;\r\n}\r\n\r\nexport const TextGreen: React.FC<Props> = ({ children, className, ...props }) => {\r\n    return (\r\n        <div className={`text-green ${className}`} {...props}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport \"./codeinput.css\";\r\n\r\n// https://blog.designly.biz/how-to-create-a-verification-code-input-component-in-react-next-js\r\n\r\ninterface Props {\r\n    code: string;\r\n    setCode: React.Dispatch<React.SetStateAction<string>>;\r\n    reset?: boolean;\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const CodeInput: React.FC<Props> = ({ code, setCode, reset, isLoading }) => {\r\n    // Refs to control each digit input element\r\n    const inputRefs: any[] = [useRef(null), useRef(null), useRef(null), useRef(null), useRef(null)];\r\n\r\n    // Reset all inputs and clear state\r\n    const resetCode = () => {\r\n        inputRefs.forEach((ref: any) => {\r\n            ref.current.value = \"\";\r\n        });\r\n        inputRefs[0].current.focus();\r\n        setCode(\"\");\r\n    };\r\n\r\n    // Listen for external reset toggle\r\n    useEffect(() => {\r\n        resetCode();\r\n        // eslint-disable-next-line\r\n    }, [reset]);\r\n\r\n    // Handle input\r\n    function handleInput(event: any, index: number) {\r\n        const input = event.target;\r\n        const previousInput = inputRefs[index - 1];\r\n        const nextInput = inputRefs[index + 1];\r\n\r\n        // Update code state with single digit\r\n        const newCode: any = code.split(\"\");\r\n\r\n        // Convert lowercase letters to uppercase\r\n        if (/^[a-z]+$/.test(input.value)) {\r\n            const uc = input.value.toUpperCase();\r\n            newCode[index] = uc;\r\n            inputRefs[index].current.value = uc;\r\n        } else {\r\n            newCode[index] = input.value;\r\n        }\r\n\r\n        setCode(newCode.join(\"\"));\r\n        input.select();\r\n\r\n        if (input.value === \"\") {\r\n            // If the value is deleted, select previous input, if exists\r\n            if (previousInput) {\r\n                previousInput.current.focus();\r\n            }\r\n        } else if (nextInput) {\r\n            // Select next input on entry, if exists\r\n            nextInput.current.select();\r\n        }\r\n    }\r\n\r\n    // Select the contents on focus\r\n    function handleFocus(event: any) {\r\n        event.target.select();\r\n    }\r\n\r\n    // Handle backspace key\r\n    function handleKeyDown(event: any, index: number) {\r\n        const input = event.target;\r\n        const previousInput = inputRefs[index - 1];\r\n\r\n        if ((event.keyCode === 8 || event.keyCode === 46) && input.value === \"\") {\r\n            event.preventDefault();\r\n            setCode((prevCode: any) => prevCode.slice(0, index) + prevCode.slice(index + 1));\r\n            if (previousInput) {\r\n                previousInput.current.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Capture pasted characters\r\n    const handlePaste = (event: any) => {\r\n        const pastedCode = event.clipboardData.getData(\"text\");\r\n        if (pastedCode.length === 6) {\r\n            setCode(pastedCode);\r\n            inputRefs.forEach((inputRef, index) => {\r\n                inputRef.current.value = pastedCode.charAt(index);\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='codeinput-container noselect'>\r\n            {[0, 1, 2, 3, 4].map((index) => (\r\n                <>\r\n                    <span key={`span.${index}`} className='codeinput-slash' />\r\n                    <input\r\n                        key={`input.${index}`}\r\n                        className='codeinput wds'\r\n                        type='text'\r\n                        placeholder='?'\r\n                        maxLength={1}\r\n                        onChange={(e) => handleInput(e, index)}\r\n                        ref={inputRefs[index]}\r\n                        autoFocus={index === 0}\r\n                        onFocus={handleFocus}\r\n                        onKeyDown={(e) => handleKeyDown(e, index)}\r\n                        onPaste={handlePaste}\r\n                        disabled={isLoading}\r\n                    />\r\n                </>\r\n            ))}\r\n            <span className='codeinput-slash' />\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport { CodeInput } from \"../../components/CodeInput/CodeInput\";\r\nimport { Panel } from \"../../components/Panel/Panel\";\r\nimport { ButtonBlue } from \"../../components/ButtonBlue/ButtonBlue\";\r\nimport { TextGreen } from \"../../components/TextGreen/TextGreen\";\r\nimport \"./code.css\";\r\n\r\nexport const Code: React.FC = () => {\r\n    const [code, setCode] = useState(\"\");\r\n\r\n    const [uploadCode] = useFetching(async () => {\r\n        // вот сюда запрос к бэку, через аксиос, все есть в директории api\r\n        console.log(code);\r\n    });\r\n\r\n    const submit = () => {\r\n        uploadCode();\r\n    };\r\n\r\n    return (\r\n        <Panel className='big-panel'>\r\n            <div className='code-content'>\r\n                <TextGreen className='code-title'>Enter your invite code</TextGreen>\r\n                <CodeInput code={code} setCode={setCode} />\r\n                <ButtonBlue className='code-button' onClick={submit}>\r\n                    <img src='/images/internet_connection.png' alt='' />\r\n                    ENTER\r\n                </ButtonBlue>\r\n            </div>\r\n        </Panel>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport type UFHook = (\r\n    callback: Function\r\n) => [fetching: Function, isLoading: boolean, error: string];\r\n\r\nexport const useFetching: UFHook = (callback: Function) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const fetching = async () => {\r\n        setError(\"\");\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            await callback();\r\n        } catch (error: any) {\r\n            setError(error.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return [fetching, isLoading, error];\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["ButtonBlue","_ref","className","props","_jsx","concat","Panel","children","TextGreen","CodeInput","code","setCode","reset","isLoading","inputRefs","useRef","handleFocus","event","target","select","useEffect","forEach","ref","current","value","focus","handlePaste","pastedCode","clipboardData","getData","length","inputRef","index","charAt","_jsxs","map","_Fragment","type","placeholder","maxLength","onChange","e","input","previousInput","nextInput","newCode","split","test","uc","toUpperCase","join","handleInput","autoFocus","onFocus","onKeyDown","keyCode","preventDefault","prevCode","slice","handleKeyDown","onPaste","disabled","Code","useState","uploadCode","callback","setIsLoading","error","setError","async","message","useFetching","console","log","onClick","submit","src","alt"],"sourceRoot":""}